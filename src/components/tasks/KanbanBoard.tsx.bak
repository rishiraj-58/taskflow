"use client";

import { useState, useEffect, useCallback, memo } from "react";
import { DragDropContext, Droppable, Draggable, DropResult } from "@hello-pangea/dnd";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { AlertCircle, Calendar, Plus } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import Link from "next/link";
import { Task } from "@/types/task";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";

interface KanbanBoardProps {
  projectId: string;
  tasks: Task[];
  loading: boolean;
  error: string | null;
  onStatusChange: (taskId: string, newStatus: string) => Promise<void>;
}

// Memoize TaskCard component to prevent unnecessary re-renders
const TaskCard = memo(({ 
  task, 
  projectId, 
  index 
}: { 
  task: Task, 
  projectId: string,
  index: number
}) => {
  // Priority styling
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "urgent": return "bg-red-200 text-red-800 dark:bg-red-900/30 dark:text-red-300";
      case "high": return "bg-orange-200 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300";
      case "medium": return "bg-blue-200 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300";
      case "low": return "bg-gray-200 text-gray-800 dark:bg-gray-800 dark:text-gray-300";
      default: return "bg-gray-200 text-gray-800 dark:bg-gray-800 dark:text-gray-300";
    }
  };

  return (
    <Draggable key={task.id} draggableId={task.id} index={index}>
      {(provided, snapshot) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          {...provided.dragHandleProps}
          className={cn(
            "bg-background rounded-md border p-4 shadow-sm min-h-[140px] flex flex-col justify-between transform transition-all duration-200 will-change-transform",
            snapshot.isDragging ? "shadow-lg scale-[1.02] bg-accent/20 rotate-1 z-10" : "hover:-translate-y-1 hover:shadow-md",
            `animate-fadeIn`
          )}
          style={{
            ...provided.draggableProps.style,
            animationDelay: `${index * 50}ms`
          }}
        >
          <Link 
            href={`/projects/${projectId}/tasks/${task.id}`}
            className="block hover:no-underline h-full flex flex-col justify-between"
          >
            <div>
              <div className="flex justify-between items-start mb-2">
                <h3 className="font-medium text-base line-clamp-2 pr-2 hover:text-primary transition-colors">
                  {task.title}
                </h3>
                <Badge variant="outline" className={cn(getPriorityColor(task.priority), "capitalize")}>
                  {task.priority}
                </Badge>
              </div>
              
              {task.description && (
                <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                  {task.description}
                </p>
              )}
            </div>
            <div className="flex justify-between items-center text-sm mt-2 pt-2 border-t border-border/50">
              <div className="flex items-center gap-1">
                {task.assigneeName ? (
                  <div className="flex items-center">
                    <Avatar className="h-5 w-5 mr-1 ring-2 ring-background">
                      <AvatarImage src={`https://avatar.vercel.sh/${task.assigneeId}`} />
                      <AvatarFallback className="text-[10px]">
                        {task.assigneeName.charAt(0)}
                      </AvatarFallback>
                    </Avatar>
                    <span className="truncate max-w-[80px] text-xs">
                      {task.assigneeName}
                    </span>
                  </div>
                ) : (
                  <span className="text-muted-foreground text-xs">Unassigned</span>
                )}
              </div>
              
              {task.dueDate && (
                <div className="flex items-center bg-muted/50 px-2 py-0.5 rounded-full text-xs">
                  <Calendar className="h-3 w-3 mr-1" />
                  <span>
                    {format(new Date(task.dueDate), "MMM dd")}
                  </span>
                </div>
              )}
            </div>
          </Link>
        </div>
      )}
    </Draggable>
  );
});

TaskCard.displayName = "TaskCard";

// Memoize the column component to optimize performance
const Column = memo(({ 
  column, 
  tasks, 
  projectId, 
  isDraggingOver 
}: { 
  column: { id: string, title: string, icon: string, color: string },
  tasks: Task[],
  projectId: string,
  isDraggingOver: boolean
}) => {
  return (
    <div className="space-y-3">
      {tasks.length === 0 ? (
        <div className="h-full flex flex-col items-center justify-center p-4 text-center border border-dashed rounded-md min-h-[140px] text-muted-foreground bg-background/50 backdrop-blur-sm hover:bg-background/80 transition-colors">
          <p className="mb-3">No tasks</p>
          <Button variant="ghost" size="sm" asChild className="text-xs">
            <Link href={`/projects/${projectId}/tasks/new?status=${column.id}`}>
              <Plus className="h-3 w-3 mr-1" />
              Add task
            </Link>
          </Button>
        </div>
      ) : (
        <>
          {tasks.map((task, index) => (
            <TaskCard 
              key={task.id} 
              task={task} 
              projectId={projectId} 
              index={index} 
            />
          ))}
        </>
      )}
    </div>
  );
});

Column.displayName = "Column";

// Main component
export default function KanbanBoard({ 
  projectId, 
  tasks, 
  loading, 
  error, 
  onStatusChange 
}: KanbanBoardProps) {
  // Define columns
  const columns = [
    { id: "todo", title: "To Do", icon: "ðŸ”µ", color: "bg-blue-500/10 border-blue-500/30 text-blue-700 dark:text-blue-300" },
    { id: "in-progress", title: "In Progress", icon: "ðŸŸ ", color: "bg-amber-500/10 border-amber-500/30 text-amber-700 dark:text-amber-300" },
    { id: "review", title: "In Review", icon: "ðŸŸ£", color: "bg-purple-500/10 border-purple-500/30 text-purple-700 dark:text-purple-300" },
    { id: "done", title: "Done", icon: "ðŸŸ¢", color: "bg-green-500/10 border-green-500/30 text-green-700 dark:text-green-300" }
  ];

  // Organize tasks by status - memoized
  const getTasksByStatus = useCallback(() => {
    const tasksByStatus: Record<string, Task[]> = {};
    
    // Initialize empty arrays for each column
    columns.forEach(column => {
      tasksByStatus[column.id] = [];
    });
    
    // Distribute tasks to their respective columns
    tasks.forEach(task => {
      if (tasksByStatus[task.status]) {
        tasksByStatus[task.status].push(task);
      } else {
        // If status doesn't match any column (which shouldn't happen), add to todo
        tasksByStatus.todo.push(task);
      }
    });
    
    return tasksByStatus;
  }, [tasks, columns]);

  const [tasksByStatus, setTasksByStatus] = useState(getTasksByStatus());

  // Update tasksByStatus when tasks change
  useEffect(() => {
    setTasksByStatus(getTasksByStatus());
  }, [getTasksByStatus]);

  // Handle drag and drop with optimizations
  const handleDragEnd = useCallback(async (result: DropResult) => {
    const { destination, source, draggableId } = result;

    // If dropped outside a droppable area
    if (!destination) return;

    // If dropped in the same position
    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    // Create a deep copy for immutability, only when needed
    const updatedTasksByStatus = { ...tasksByStatus };

    // If the status changed, update in the backend
    if (destination.droppableId !== source.droppableId) {
      // Get the task
      const taskId = draggableId;
      const newStatus = destination.droppableId;
      
      // Deep copy of the task to move
      const taskToMove = { ...updatedTasksByStatus[source.droppableId][source.index] };
      
      // Remove from source
      updatedTasksByStatus[source.droppableId] = [
        ...updatedTasksByStatus[source.droppableId].slice(0, source.index),
        ...updatedTasksByStatus[source.droppableId].slice(source.index + 1)
      ];
      
      // Update task status
      taskToMove.status = newStatus as any;
      
      // Add to destination
      updatedTasksByStatus[destination.droppableId] = [
        ...updatedTasksByStatus[destination.droppableId].slice(0, destination.index),
        taskToMove,
        ...updatedTasksByStatus[destination.droppableId].slice(destination.index)
      ];
      
      // Set state optimistically
      setTasksByStatus(updatedTasksByStatus);

      // Update in backend
      try {
        await onStatusChange(taskId, newStatus);
      } catch (error) {
        console.error("Failed to update task status:", error);
        // Revert UI on error by setting back to original calculation
        setTasksByStatus(getTasksByStatus());
      }
    } else {
      // Just reordering within the same column - use array spread for immutability
      const column = [...updatedTasksByStatus[source.droppableId]];
      const [removed] = column.splice(source.index, 1);
      column.splice(destination.index, 0, removed);
      
      updatedTasksByStatus[source.droppableId] = column;
      setTasksByStatus(updatedTasksByStatus);
    }
  }, [tasksByStatus, onStatusChange, getTasksByStatus]);

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 animate-pulse">
        {columns.map((column, index) => (
          <Card key={column.id} className={`flex flex-col overflow-hidden h-[calc(100vh-180px)] border ${column.color} animate-fadeIn`} style={{animationDelay: `${index * 100}ms`}}>
            <CardHeader className="p-3 flex-shrink-0 border-b">
              <CardTitle className="text-sm font-medium flex items-center justify-between">
                <span className="flex items-center">
                  <span className="mr-2">{column.icon}</span>
                  {column.title}
                  <Skeleton className="inline-block w-6 h-6 rounded-full ml-2" />
                </span>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3 space-y-3 flex-1 overflow-y-auto">
              {[1, 2, 3].map(i => (
                <Skeleton key={i} className="w-full h-[140px] rounded-md" />
              ))}
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive" className="animate-scaleIn">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>
          {error}. Please try refreshing the page.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {columns.map((column, columnIndex) => (
          <div key={column.id} className="flex flex-col animate-fadeIn" style={{ animationDelay: `${columnIndex * 100}ms` }}>
            <Card className={`flex-1 h-[calc(100vh-180px)] flex flex-col overflow-hidden border ${column.color} shadow-md hover:shadow-lg transition-shadow`}>
              <CardHeader className="p-3 border-b flex-shrink-0 bg-card/50 sticky top-0 z-10">
                <CardTitle className="text-sm font-medium flex items-center justify-between">
                  <span className="flex items-center space-x-2">
                    <span>{column.icon}</span>
                    <span>{column.title}</span>
                    <Badge variant="outline" className="ml-2 backdrop-blur-sm">
                      {tasksByStatus[column.id].length}
                    </Badge>
                  </span>
                </CardTitle>
              </CardHeader>
              
              <Droppable 
                droppableId={column.id}
                mode="virtual" // Use virtual scrolling for better performance
              >
                {(provided, snapshot) => (
                  <CardContent 
                    className={cn(
                      "p-3 pt-4 flex-1 overflow-y-auto transition-colors duration-200 thin-scrollbar",
                      snapshot.isDraggingOver ? "bg-accent/50 backdrop-blur-sm" : ""
                    )}
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    style={{
                      // Optimize scrolling with hardware acceleration
                      transform: "translate3d(0,0,0)",
                      WebkitOverflowScrolling: "touch"
                    }}
                  >
                    <Column 
                      column={column}
                      tasks={tasksByStatus[column.id]}
                      projectId={projectId}
                      isDraggingOver={snapshot.isDraggingOver}
                    />
                    {provided.placeholder}
                  </CardContent>
                )}
              </Droppable>
            </Card>
          </div>
        ))}
      </div>
    </DragDropContext>
  );
} 