generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String            @id @default(uuid())
  clerkId         String            @unique
  email           String            @unique
  firstName       String
  lastName        String
  imageUrl        String?
  
  // NEW: Role-based features
  primaryRole          UserRole      @default(DEVELOPER)
  secondaryRoles       UserRole[]
  aiPreferences        Json          @default("{}")
  dashboardPreferences Json          @default("{}")
  notificationPreferences Json       @default("{}")
  
  // NEW: Activity tracking
  lastActiveAt         DateTime?
  lastWorkspaceId      String?
  lastProjectId        String?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Existing relationships
  activityLogs    ActivityLog[]
  assignedBugs    Bug[]             @relation("BugAssignee")
  reportedBugs    Bug[]             @relation("BugReporter")
  comments        Comment[]
  sentInvitations Invitation[]      @relation("InvitationCreator")
  mentions        Mention[]
  ownedProjects   Project[]         @relation("ProjectOwner")
  assignedTasks   Task[]            @relation("TaskAssignee")
  createdTasks    Task[]            @relation("TaskCreator")
  workspaces      Workspace[]
  workspaceMember WorkspaceMember[]
  
  // NEW: Context tracking
  contexts        UserContext[]
}

model UserContext {
  id              String    @id @default(uuid())
  userId          String
  workspaceId     String?
  projectId       String?
  contextData     Json      @default("{}")
  sessionDuration Int?
  lastAccessed    DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, workspaceId])
  @@index([lastAccessed])
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  invitations Invitation[]
  projects    Project[]
  user        User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  members     WorkspaceMember[]
}

model WorkspaceMember {
  id          String       @id @default(uuid())
  workspaceId String
  userId      String
  role        MemberRole   @default(MEMBER)
  status      MemberStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model Invitation {
  id          String     @id @default(uuid())
  email       String
  workspaceId String
  role        MemberRole @default(MEMBER)
  status      String     @default("PENDING")
  token       String     @unique
  expiresAt   DateTime
  createdAt   DateTime   @default(now())
  createdBy   String
  inviter     User       @relation("InvitationCreator", fields: [createdBy], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  status      String     @default("active")
  archived    Boolean    @default(false)
  workspaceId String
  ownerId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bugs        Bug[]
  documents   Document[]
  owner       User       @relation("ProjectOwner", fields: [ownerId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  roadmaps    Roadmap[]
  sprints     Sprint[]
  tasks       Task[]
  workflows   Workflow[]
}

model Sprint {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String   @default("planned")
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  projectId   String
  sprintId    String?
  assigneeId  String?
  creatorId   String
  type        String    @default("feature")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User      @relation("TaskCreator", fields: [creatorId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint      Sprint?   @relation(fields: [sprintId], references: [id])
}

model Document {
  id        String   @id @default(uuid())
  title     String
  content   String?
  projectId String
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ActivityLog {
  id          String   @id @default(uuid())
  entityId    String
  entityType  String
  action      String
  description String
  userId      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Workflow {
  id          String   @id @default(uuid())
  name        String
  description String?
  steps       Json?
  status      String   @default("active")
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id          String       @id @default(uuid())
  content     String
  taskId      String
  authorId    String
  parentId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?     @relation("CommentThread", fields: [parentId], references: [id])
  replies     Comment[]    @relation("CommentThread")
  task        Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  mentions    Mention[]
}

model Attachment {
  id          String   @id @default(uuid())
  filename    String
  contentType String
  key         String   @unique
  size        Int
  commentId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Mention {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Bug {
  id               String      @id @default(uuid())
  title            String
  description      String?
  status           BugStatus   @default(OPEN)
  priority         BugPriority @default(MEDIUM)
  severity         BugSeverity @default(MEDIUM)
  stepsToReproduce String?
  environment      String?
  browserInfo      String?
  operatingSystem  String?
  projectId        String
  assigneeId       String?
  reporterId       String
  dueDate          DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  assignee         User?       @relation("BugAssignee", fields: [assigneeId], references: [id])
  project          Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reporter         User        @relation("BugReporter", fields: [reporterId], references: [id])
}

model Roadmap {
  id          String      @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  projectId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  milestones  Milestone[]
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Milestone {
  id           String           @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       MilestoneStatus  @default(PLANNED)
  roadmapId    String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  dependencies DependencyLink[] @relation("SourceMilestone")
  dependents   DependencyLink[] @relation("TargetMilestone")
  features     Feature[]
  roadmap      Roadmap          @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
}

model Feature {
  id          String          @id @default(uuid())
  name        String
  description String?
  priority    FeaturePriority @default(MEDIUM)
  status      FeatureStatus   @default(PLANNED)
  milestoneId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  milestone   Milestone       @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
}

model DependencyLink {
  id                String         @id @default(uuid())
  sourceMilestoneId String
  targetMilestoneId String
  type              DependencyType @default(BLOCKS)
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sourceMilestone   Milestone      @relation("SourceMilestone", fields: [sourceMilestoneId], references: [id], onDelete: Cascade)
  targetMilestone   Milestone      @relation("TargetMilestone", fields: [targetMilestoneId], references: [id], onDelete: Cascade)

  @@unique([sourceMilestoneId, targetMilestoneId])
}

enum UserRole {
  WORKSPACE_CREATOR
  WORKSPACE_ADMIN
  PROJECT_MANAGER
  DEVELOPER
  STAKEHOLDER
  TEAM_LEAD
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INVITED
  REMOVED
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  FIXED
  VERIFIED
  CLOSED
  REOPENED
}

enum BugPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum FeatureStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DEFERRED
  CANCELLED
}

enum FeaturePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DependencyType {
  BLOCKS
  REQUIRED_BY
  RELATED_TO
}
